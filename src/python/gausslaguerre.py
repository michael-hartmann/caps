#!/usr/bin/python

from __future__ import division
from math import sqrt
import mpmath as mp
#from mpmath import laguerre,log,findroot
from scipy.optimize import brentq
from sys import stderr

mp.mp.dps = 100

def bisect(f, a,b, tol=1e-50):
    while True:
        diff = b-a

        if abs(diff) < tol:
            return (a+b)/2

        ab = (a+b)/2
        prod = f(a)*f(ab)
        if prod < 0:
            a,b = a,ab
        elif prod > 0:
            a,b = ab,b
        else:
            return ab


def nodes(n):
    left  = mp.mpf(0)
    right = mp.mpf(n+(n-1)*sqrt(n)*1.01)

    i = 2
    factor = 2

    while True:
        l = [ (x,mp.laguerre(n,0,x)) for x in mp.linspace(left,right,n*factor**i)]

        intervals = []
        for j in range(len(l)-1):
            prod = l[j][1]*l[j+1][1]
            if prod < 0:
                intervals.append([l[j][0], l[j+1][0]])

        if len(intervals) == n:
            break
        i += 1

    roots = []
    f = lambda x: mp.laguerre(n,0,x)
    for ab in intervals:
        a,b = ab
        try:
            z = mp.findroot(f, (a, b), tol=1e-50, solver='bisect')
        except:
            z = bisect(f, a, b, tol=1e-50)
        roots.append( z )

    return roots


def wk(n, x):
    return x/((n+1)*mp.laguerre(n+1,0,x))**2


orders = (10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 125, 150)

print "#ifndef GAUSSLAGUERRE_H"
print "#define GAUSSLAGUERRE_H"
print
print "/* This file was automatically generated by gausslaguerre.py */"
print
print "#include \"floattypes.h\""
print

#i = 0
#for order in orders:
#    print "#define GAUSSLAGUERRE_ORDER_%d %d" % (order, i)
#    i += 1
#print
#print "#define GAUSSLAGUERE_ORDER_MAX %d" % (len(orders)-1)
#print
#print
print "int gausslaguerre_nodes_weights(int order, float80 **xk, float80 **ln_wk);"
print
print

for order in orders:
    print >>stderr, order
    s_xk = "float80 xk%d[] = {\n" % order
    s_wk = "float80 ln_wk%d[] = {\n" % order
    xk = nodes(order)
    for x in xk:
        s_xk += "    %sL,\n" % mp.libmp.to_str(x._mpf_, 40)
        s_wk += "    %sL,\n" % mp.libmp.to_str(mp.log(wk(order,x))._mpf_, 40)

    s_xk = s_xk[:-2] + "\n};"
    s_wk = s_wk[:-2] + "\n};"

    print s_xk
    print
    print s_wk
    print
    print


print "int gausslaguerre_nodes_weights(int order, float80 **xk, float80 **ln_wk)"
print "{"
print "    if(order > 0 && order <= %d)" % orders[0]
print "    {"
print "        *xk    = xk%d;"    % orders[0]
print "        *ln_wk = ln_wk%d;" % orders[0]
print "        return %d;"        % orders[0]
print "    }"
for i in range(len(orders)-1):
    print "    else if(order > %d && order <= %d)" % (orders[i], orders[i+1])
    print "    {"
    print "        *xk    = xk%d;"    % orders[i+1]
    print "        *ln_wk = ln_wk%d;" % orders[i+1]
    print "        return %d;"        % orders[i+1]
    print "    }"
print "    else /* max order */"
print "    {"
print "        *xk    = xk%d;"    % orders[-1]
print "        *ln_wk = ln_wk%d;" % orders[-1]
print "        return %d;"        % orders[-1]
print "    }"
print "}"
print
print "#endif"
